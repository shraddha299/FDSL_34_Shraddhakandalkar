#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node *prev, *next;
};

struct node *head = NULL;

// Insert at First
void insertAtFirst()
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);

    if (head == NULL)
    {
        head = newnode;
        newnode->next = NULL;
        newnode->prev = NULL;
    }
    else 
    {
        newnode->next = head;
        head->prev = newnode;
        newnode->prev = NULL;
        head = newnode;
    }
}

// Insert at Last
void insertAtLast()
{
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (head == NULL)
    {
        head = newnode;
        newnode->prev = NULL;
    } 
    else
    {
        struct node *temp = head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
    }
}

// Insert at Position
void insertAtPosition() 
{
    int pos, i = 1, count = 0;
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);
    printf("Enter position to insert data: ");
    scanf("%d", &pos);

    struct node *temp = head;
    while (temp != NULL)
    {
        count++;
        temp = temp->next;
    }

    if (pos < 1 || pos > count + 1)
    {
        printf("Invalid position\n");
        return;
    }

    if (pos == 1)
    {
        insertAtFirst();
    } 
    else
    {
        temp = head;
        i = 1;
        while (i < pos - 1)
        {
            temp = temp->next;
            i++;
        }
        newnode->next = temp->next;
        if (temp->next != NULL)
            temp->next->prev = newnode;
        temp->next = newnode;
        newnode->prev = temp;
    }
}

// Delete First Node
void deleteFirst()
{
    if (head == NULL)
    {
        printf("DLL is empty\n");
    }
    else if (head->next == NULL) 
    {
        free(head);
        head = NULL;
    } 
    else
    {
        struct node *temp = head;
        head = head->next;
        head->prev = NULL;
        free(temp);
    }
}
void deleteLast() 
{
    if (head == NULL)
    {
        printf("DLL is empty\n");
        return;
    }

    struct Node* temp = head;
    struct Node* prevnode = NULL;

    while (temp->next != NULL) 
    {
        prevnode = temp;
        temp = temp->next;
    }

    if (temp == head)
    {
        head = NULL;
    } else 
    {
        prevnode->next = NULL;
    }

    free(temp);
}
void deleteAtPosition()
{
    int pos, i = 1, count = 1;
    struct Node* temp = head;

    printf("Enter the position: ");
    scanf("%d", &pos);

    while (temp->next != NULL)
    {
        temp = temp->next;
        count++;
    }

    if (pos < 1 || pos > count)
    {
        printf("Invalid position\n");
        return;
    }
    else if (pos == 1)
    {
        deleteFirst();
    } 
    else if (pos == count) 
    {
        deleteLast();
    } 
    else
    {
        temp = head;
        while (i < pos) 
        {
            temp = temp->next;
            i++;
        }

        temp->prev->next = temp->next;
        temp->next->prev = temp->prev;
        free(temp);
    }
}

void display()
{
    if (head == NULL)
    {
        printf("DLL is empty\n");
        return;
    }
    temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL)
    {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int countNodes()
{
    int count = 0;
    temp = head;
    while (temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    return count;
}

void searchItem() {
    int key, position = 1;
    printf("Enter item to search: ");
    scanf("%d", &key);
    temp = head;
    while (temp != NULL)
    {
        if (temp->data == key)
        {
            printf("Item %d found at position %d\n", key, position);
            return;
        }
        position++;
        temp = temp->next;
    }
    printf("Item %d not found\n", key);
}

int main() {
    int choice;
    do {
        printf("\nDoubly Linked List Operations:\n");
        printf("1. Insert at First\n");
        printf("2. Insert at Last\n");
        printf("3. Insert at Position\n");
        printf("4. Delete at First\n");
        printf("5. Delete at Last\n");
        printf("6. Delete at Position\n");
        printf("7. Display\n");
        printf("8. Count Nodes\n");
        printf("9. Search Item\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1: insertAtFirst();
                   break;
            case 2: insertAtLast();
                   break;
            case 3: insertAtPosition(); 
                   break;
            case 4: deleteAtFirst();
                  break;
            case 5: deleteAtLast();
                  break;
            case 6: deleteAtPosition();
                  break;
            case 7: display();
                  break;
            case 8: printf("Total nodes: %d\n", countNodes());
                   break;
            case 9: searchItem(); 
                   break;
            case 10: printf("Exiting...\n"); 
                  break;
            default: printf("Invalid choice\n");
        }
    } while (choice != 10);

    return 0;
}
