#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head, *newnode, *temp, *prevnode;

void insertAtFirst() 
{
    newnode = malloc(sizeof(struct node));
    printf("Enter the data of newnode:\n");
    scanf("%d", &newnode->data);

    newnode->next = head;
    head = newnode;
}

void insertAtLast() 
{
    newnode = malloc(sizeof(struct node));
    printf("Enter the data of newnode:\n");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (head == NULL)
    {
        head = newnode;
    }
    else 
    {
        temp = head;
        while (temp->next != NULL) 
        {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void insertAtPosition() 
{
    int pos, i = 1;
    printf("Enter the position to insert:\n");
    scanf("%d", &pos);
    newnode = malloc(sizeof(struct node));
    printf("Enter the data of newnode:\n");
    scanf("%d", &newnode->data);

    if (pos == 1) 
    {
        newnode->next = head;
        head = newnode;
    }
    else 
    {
        temp = head;
        while (i < pos - 1 && temp != NULL) 
        {
            temp = temp->next;
            i++;
        }
        if (temp == NULL)
        {
            printf("Position out of range\n");
            free(newnode);
        }
        else
        {
            newnode->next = temp->next;
            temp->next = newnode;
        }
    }
}

void deleteFirst() 
{
    if (head == NULL)
    {
        printf("Empty singly link list\n");
    } 
    else 
    {
        temp = head;
        head = head->next;
        free(temp);
    }
}

void deleteLast()
{
    if (head == NULL) 
    {
        printf("Empty singly link list\n");
    } 
    else if (head->next == NULL) 
    {
        free(head);
        head = NULL;
    }
    else 
    {
        temp = head;
        while (temp->next->next != NULL)
        {
            temp = temp->next;
        }
        free(temp->next);
        temp->next = NULL;
    }
}

void deleteAtPosition() 
{
    int pos, i = 1;
    printf("Enter the position to delete:\n");
    scanf("%d", &pos);

    if (head == NULL)
    {
        printf("List is empty\n");
        return;
    }

    if (pos == 1)
    {
        temp = head;
        head = head->next;
        free(temp);
    }
    else
    {
        temp = head;
        while (i < pos - 1 && temp->next != NULL)
        {
            temp = temp->next;
            i++;
        }
        if (temp->next == NULL) 
        {
            printf("Position out of range\n");
        }
        else 
        {
            struct node *del = temp->next;
            temp->next = del->next;
            free(del);
        }
    }
}

void display() {
    if (head == NULL) 
    {
        printf("Link is empty\n");
    } 
    else
    {
        temp = head;
        while (temp != NULL)
        {
            printf("%d\t", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

void main() {
    head = NULL;
    int ch;
    printf("Operations of singly link list--\n");
    printf("1. Insert at First\n");
    printf("2. Insert at Last\n");
    printf("3. Insert at Position\n");
    printf("4. Delete at First\n");
    printf("5. Delete at Last\n");
    printf("6. Delete at Position\n");
    printf("7. Display\n");
    printf("0. Exit\n");

    do {
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch (ch) 
        {
            case 1:
                insertAtFirst();
                break;
            case 2:
                insertAtLast();
                break;
            case 3:
                insertAtPosition();
                break;
            case 4:
                deleteFirst();
                break;
            case 5:
                deleteLast();
                break;
            case 6:
                deleteAtPosition();
                break;
            case 7:
                display();
                break;
            case 0:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (ch != 0);
}
